package rahul.thorat.android.demoprojects;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.StrictMode;
import android.util.Base64;
import android.util.Log;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.error.AuthFailureError;
import com.android.volley.error.VolleyError;
import com.android.volley.request.JsonObjectRequest;
import com.android.volley.toolbox.Volley;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

import cn.pedant.SweetAlert.SweetAlertDialog;
import rahul.thorat.android.demoprojects.ConstantsClass.GetUrldata;
import rahul.thorat.android.demoprojects.Ency.MyCipher;

public class MainActivity extends AppCompatActivity {
    ProgressDialog progressDialog;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        String s = "1234";
        System.out.println("Your HashCode Generated by sha is: " + getMd5(s));
    }

//abc

    public static String getMd5(String input)
    {
        try {

            // Static getInstance method is called with hashing MD5
            MessageDigest md = MessageDigest.getInstance("SHA-256");

            // digest() method is called to calculate message digest
            //  of an input digest() return array of byte
            byte[] messageDigest = md.digest(input.getBytes());

            // Convert byte array into signum representation
            BigInteger no = new BigInteger(1, messageDigest);

            // Convert message digest into hex value
            String hashtext = no.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            return hashtext;
        }

        // For specifying wrong message digest algorithms
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

/*
public void getApiCall() {

    progressDialog = new ProgressDialog(MainActivity.this);
    progressDialog.setMessage("Loading please wait...");
    progressDialog.show();

    JSONArray jsonArray1 = new JSONArray();
    JSONObject jsonObject2 = new JSONObject();
    JSONObject jsonObject1 = new JSONObject();
    JSONObject jsonObject11 = null;


    try {


        jsonObject1.put("auth_key:", "2");
        jsonObject1.put("password", "1234");


        String reqvalues = MyCipher.encrypt(jsonObject1.toString(), GetUrldata.Encryptionkey);

        Log.e("Reqvalues", "  = " + reqvalues);

        jsonArray1.put(reqvalues);
        jsonObject2.put("Data", reqvalues);
    } catch (
            JSONException e) {
        e.printStackTrace();
    } catch (Exception e) {
        e.printStackTrace();
    }


    if (Build.VERSION.SDK_INT > 9) {
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
    }
    Getbagroundorder(jsonObject2);


}


private void Getbagroundorder(final JSONObject request) {


final String Url = "Master/ManageCustomerDetails";

        //  ReLinker.Logger.log("this is Cash Payment request for Post method request :::" + request);
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST, GetUrldata.BaseUrl+Url, request, new Response.Listener<JSONObject>() {
@Override
public void onResponse(JSONObject response) {

        progressDialog.dismiss();
        //    Logger.log("this is Cash Payment response for Post method response :::" + response);
        Log.i("imageresponsebaground", "" + response);
        String StatuCode, Status, Message, Result, Addresss, ConsumerName, ConsumerNo;


        try {

        JSONObject jsonobj = new JSONObject(response.toString());
        Log.i("jsonobject", "" + response);
        StatuCode = String.valueOf(jsonobj.getString("StatusCode"));
        Status = String.valueOf(jsonobj.getString("Status"));
        Message = String.valueOf(jsonobj.getString("Message"));


        if (StatuCode.equals("1")) {




        SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(MainActivity.this, SweetAlertDialog.SUCCESS_TYPE)
        .setTitleText("")
        .setContentText(Message)
        .setConfirmText("OK")
        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {
@Override
public void onClick(SweetAlertDialog sDialog) {
        //
        sDialog.dismiss();

        Intent intent = new Intent(MainActivity.this,MainActivity.class);

        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        startActivity(intent);
        finish();

        }
        });
        sweetAlertDialog.setCancelable(false);
        sweetAlertDialog.show();



        }
        else
        {
        new SweetAlertDialog(MainActivity.this, SweetAlertDialog.ERROR_TYPE)
        .setTitleText("")
        .setContentText(Message)
        .setConfirmText("OK")
        .showCancelButton(true)

        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {
@Override
public void onClick(SweetAlertDialog sDialog) {
        sDialog.dismiss();


        }
        })
        .show();
        }


        } catch (JSONException e) {
        e.printStackTrace();
        }

        }



        },
        new Response.ErrorListener() {
@Override
public void onErrorResponse(VolleyError Error) {

        progressDialog.dismiss();
                       */
/* Toast.makeText(CaptureSignatureActivity.this, "No Reply From Server",
                                Toast.LENGTH_LONG).show();*//*


        }

        }) {

@RequiresApi(api = Build.VERSION_CODES.KITKAT)
@Override
public Map<String, String> getHeaders() throws AuthFailureError {
        Map<String, String> headers = new HashMap<>();
        //String credentials = String.format("%s:%s","diglpg","diglpg@12345?");
        String credentials = GetUrldata.Credentials;
        String auth = "Basic " + Base64.encodeToString(credentials.getBytes(Charsets.US_ASCII),Base64.NO_WRAP);

        headers.put("Authorization", auth);
        return headers;
        }


        };
        RequestQueue requestQueue = Volley.newRequestQueue(this);
        jsonObjectRequest.setShouldCache(false);
        requestQueue.add(jsonObjectRequest);
        jsonObjectRequest.setRetryPolicy(new DefaultRetryPolicy(30 * 1000, 0,
        DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        }

*/
        }